"""
Created on Sat Sep 12 16:11:00 2020

@author: Shadow
"""
import pandas as pd
from tkinter import *
from tkinter import ttk
from tkinter import filedialog
from tkinter import Menu
from nltk.tokenize import casual_tokenize
import nltk
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.layout import LAParams
from pdfminer.converter import TextConverter
from io import StringIO
from pdfminer.pdfpage import PDFPage
import os

import PyPDF2
from PyPDF2 import PdfFileReader, PdfFileWriter
import re

import sys



#### The folder where are the documents
folder_doc = r"D:\education-job mismatching"
document_name = r"An Alternative Approach to Search Frictions.pdf"
## Define document path
file_path = os.path.join(folder_doc, document_name)

#### A Function:
def Count_Words(x):
    #From PDF to Text. 
    resource_manager = PDFResourceManager(caching=True)
    out_text = StringIO()
    laParams = LAParams()
    text_converter = TextConverter(resource_manager, out_text, laparams=laParams)
    fp = open( x , 'rb')
    interpreter = PDFPageInterpreter(resource_manager, text_converter)
    for page in PDFPage.get_pages(fp, pagenos=set(), maxpages=0, password="",
                                  caching=True, check_extractable=True):
        interpreter.process_page(page)    
    text = out_text.getvalue()
    fp.close()
    text_converter.close()
    out_text.close()       
    # tokenizer
    tokens_extracted= casual_tokenize(text, reduce_len=True, strip_handles=True)
    nltk.download('stopwords') ### Canonical stop-words
    stop_words = nltk.corpus.stopwords.words('english') 
    tokens_extracted = [x.lower() for x in tokens_extracted]
    tokens_without_stopwords = [x for x in tokens_extracted if x not in stop_words]
    tokens_without_stopwords = [x for x in tokens_without_stopwords if len(x)>1 ]    
    # Count Words
    counts = dict()
    words = tokens_without_stopwords
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    #From Dictionary to dataframe 
    df = pd.DataFrame.from_dict(counts, orient='index')
    df = df.sort_values([0], ascending = (False))
    df = df.reset_index()
    df.columns=["Words", "Repetition"]
    # Return A Data Frame which contain a ranking
    return df


Text_words = Count_Words(file_path)

## Export to CSV
Text_words.to_csv( "Folder_OutPut\conteo_palabras.csv", encoding= "latin-1" )   
